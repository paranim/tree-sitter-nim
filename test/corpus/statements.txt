=====================================
Import statements
=====================================

import a, b
import b/c as d
import a/b/[c, d]
import lib/pure/os, "lib/pure/times"

---

(module
  (block
    (import_statement
      (identifier) (op)
      (identifier)))
  (block
    (import_statement
      (identifier) (op) (identifier)
      (identifier)))
  (block
    (import_statement
      (identifier) (op) (identifier) (op) (identifier_list (identifier) (op) (identifier))))
  (block (import_statement (identifier) (op) (identifier) (op) (identifier) (op) (string))))

=====================================
Import-from statements
=====================================

from a import b
from a import b, c
from a/b import c
from a as b import `c`

---

(module
  (block
    (import_from_statement
      (identifier)
      (identifier)))
  (block
    (import_from_statement
      (identifier)
      (identifier) (op)
      (identifier)))
  (block
    (import_from_statement
      (identifier) (op) (identifier)
      (identifier)))
  (block
    (import_from_statement
      (identifier)
      (identifier)
      (string))))

=====================================
Echo statements
=====================================

echo a
echo b, c
echo 0 or 1, 1 or 0,
echo 0 or 1

---

(module
  (block (identifier) (identifier))
  (block (identifier) (identifier) (op) (identifier))
  (block
    (identifier)
    (operator (integer) (op) (integer)) (op)
    (operator (integer) (op) (integer)) (op))
  (block
    (identifier)
    (operator (integer) (op) (integer))))


=====================================
Expression statements
=====================================

a
b + c

---

(module
  (block (identifier))
  (block (operator (identifier) (op) (identifier))))


=====================================
If statements
=====================================

if a:
  b
  c
when not defined(release):
  echo "hi"

---

(module
  (block
    (identifier)
    (identifier) (op)
    body: (block
      (identifier)
      (identifier)))
   (block
     (identifier) (operator (op) right: (call function: (identifier) arguments: (argument_list (identifier)))) (op)
      body: (block (identifier) (string))))


====================================================
Comments
====================================================

echo a
# hi
echo b # bye
echo c
#[a]# b #[c]#

##[
  multi-line comments don't need to start with
  two # chars, but it should work anyway
]#
bar

---

(module
  (block (identifier) (identifier))
  (comment)
  (block (identifier) (identifier)
    (comment))
  (block (identifier) (identifier))
  (comment) (block (identifier)) (comment)
  (comment) (comment) (block (identifier)))

====================================================
Comments at different indentation levels
====================================================

if a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (block
    (identifier) (identifier) (op)
    (comment)
    (comment)
    (comment)
    (block
      (identifier)
      (comment)
      (identifier))))

====================================================
Comments after dedents
====================================================

if a:
  b

# one
c

---

(module
  (block
    (identifier)
    (identifier) (op)
    (block
      (identifier)))
  (comment)
  (block (identifier)))

====================================================
Newline tokens followed by comments
====================================================

echo "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module
  (block (identifier) (string))
  (comment))

=====================================
Declaration statements
=====================================

let a = 1
let a: int = 1
var a: int
var
  a = 1
  b = 2
  c: int = 3
  d: string
  e =
    when defined(release):
      1
    else:
      2
  f = hello()
const a* = "hello"
let x = a * b

---

(module
  (block (declaration (block (decl_block (identifier) (op) (block (integer))))))
  (block (declaration (block (decl_block (identifier) (op) (identifier) (op) (block (integer))))))
  (block (declaration (block (decl_block (identifier) (op) (identifier)))))
  (block (declaration (block
    (decl_block (identifier) (op) (block (integer)))
    (decl_block (identifier) (op) (block (integer)))
    (decl_block (identifier) (op) (identifier) (op) (block (integer)))
    (decl_block (identifier) (op) (identifier))
    (decl_block (identifier) (op) (block
      (identifier) (call (identifier) (argument_list (identifier))) (op)
      (block (integer))
      (identifier) (op) (integer)))
    (decl_block (identifier) (op) (block (call (identifier) (argument_list)))))))
  (block (declaration (block (decl_block (public_id (identifier)) (op) (block (string))))))
  (block (declaration (block (decl_block (identifier) (op) (block (operator (identifier) (op) (identifier))))))))


=====================================
Function definitions
=====================================

proc hello()
func goodbye(a, b: int)

proc hello[T]() =
  echo "hello"

{.pop.}

proc a(x: int, y: array[2, string])
proc hello() {.cdecl.}
proc goodbye(f: proc(): bool)

proc `==`*(a, b: NimIdent): bool {.magic: "EqIdent", noSideEffect, deprecated:
  "Deprecated since version 0.18.1; Use '==' on 'NimNode' instead.".}

proc getLib(): string =
  const extension =
    when defined(windows):
      "dll"
    elif defined(macosx):
      "dylib"
    elif defined(linux):
      "so"
  getAppDir().joinPath("libvim." & extension)

---

(module
  (block (function_definition (identifier) (parameters)))
  (block (function_definition (identifier) (parameters (identifier) (op) (typed_parameter (identifier) (op) (identifier)))))
  (block (function_definition (identifier) (generics (identifier)) (parameters) (op) (block (identifier) (string))))
  (block (pragma (identifier)))
  (block 
    (function_definition (identifier)
      (parameters
        (typed_parameter (identifier) (op) (identifier)) (op)
        (typed_parameter (identifier) (op) (subscript (identifier) (integer) (op) (identifier))))))
  (block (function_definition (identifier) (parameters) (pragma (identifier))))
  (block (function_definition (identifier) (parameters (typed_parameter (identifier) (op) (lambda_definition (parameters) (op) (identifier))))))
  (block 
    (function_definition (public_id (string))
      (parameters (identifier) (op) (typed_parameter (identifier) (op) (identifier)))
      (op)
      (identifier)
      (pragma (pair (identifier) (op) (string)) (op) (identifier) (op) (pair (identifier) (op) (string)))))
  (block 
    (function_definition (identifier) (parameters) (op) (identifier) (op)
      (block
        (declaration (block
          (decl_block (identifier) (op) (block
            (identifier) (call (identifier) (argument_list (identifier))) (op) (block (string))
            (identifier) (call (identifier) (argument_list (identifier))) (op) (block (string))
            (identifier) (call (identifier) (argument_list (identifier))) (op) (block (string))))))
        (call (attribute (call (identifier) (argument_list)) (op) (identifier)) (argument_list (operator (string) (op) (identifier))))))))


=====================================
Type definitions
=====================================

type
  Field* {.pure.} = enum
    Identifier, Attribute, Value
  Fact[T] = tuple[id: T, attr: T, value: T]
  TokenKind = enum
    Insert, Retract, Update
  Token[T] = object
    fact: Fact[T]
    case kind: TokenKind
    of Insert, Retract:
      nil
    of Update:
      oldFact: Fact[T]
  Var* = object
    name*: string
    field: Field
  PtrSet[T] = HashSet[ptr Fact[T]]
  AlphaNode[T] = ref object of Node
    facts: Table[int, Table[int, Fact[T]]]

---

(module
  (block
    (type_definition (block
      (type_block (public_id (identifier)) (pragma (identifier)) (op) (identifier) (block (identifier) (op) (identifier) (op) (identifier)))
      (type_block (identifier) (generics (identifier)) (op)
        (subscript (identifier) (pair (identifier) (op) (identifier)) (op) (pair (identifier) (op) (identifier)) (op) (pair (identifier) (op) (identifier))))
      (type_block (identifier) (op) (identifier) (block (identifier) (op) (identifier) (op) (identifier)))
      (type_block (identifier) (generics (identifier)) (op) (identifier) (block (identifier) (op) (subscript (identifier) (identifier)) (identifier) (identifier) (op) (block (identifier)) (block (op) (identifier) (op) (identifier) (op) (block (none))) (block (op) (identifier) (op) (block (identifier) (op) (subscript (identifier) (identifier))))))
      (type_block (public_id (identifier)) (op) (identifier) (block
        (public_id (identifier)) (op) (identifier)
        (identifier) (op) (identifier)))
      (type_block (identifier) (generics (identifier)) (op) (subscript (identifier) (subscript (identifier) (identifier))))
      (type_block (identifier) (generics (identifier)) (op) (operator (identifier) (op) (identifier)) (block
        (identifier) (op) (subscript (identifier) (identifier) (op) (subscript (identifier) (identifier) (op) (subscript (identifier) (identifier))))))))))

