=====================================
Import statements
=====================================

import a, b
import b/c as d
import a/b/c

---

(module
  (import_statement
    (slashed_name (identifier))
    (slashed_name (identifier)))
  (import_statement
    (aliased_import
      (slashed_name (identifier) (identifier))
      (identifier)))
  (import_statement
    (slashed_name (identifier) (identifier) (identifier))))

=====================================
Import-from statements
=====================================

from a import b
from a import *
from a import (b, c)
from a/b import c

---

(module
  (import_from_statement
    (slashed_name (identifier))
    (slashed_name (identifier)))
  (import_from_statement
    (slashed_name (identifier))
    (wildcard_import))
  (import_from_statement
    (slashed_name (identifier))
    (slashed_name (identifier))
    (slashed_name (identifier)))
  (import_from_statement
    (slashed_name (identifier) (identifier))
    (slashed_name (identifier))))

=====================================
Echo statements
=====================================

echo a
echo b, c
echo 0 or 1, 1 or 0,
echo 0 or 1

---

(module
  (omit_parens_statement (identifier) (identifier))
  (omit_parens_statement (identifier) (identifier) (identifier))
  (omit_parens_statement (identifier)
    (operator (integer) (op) (integer))
    (operator (integer) (op) (integer)))
  (omit_parens_statement (identifier)
    (operator (integer) (op) (integer))))

=====================================
Assert statements
=====================================

assert a
assert b, c

---

(module
  (assert_statement (identifier))
  (assert_statement (identifier) (identifier)))

=====================================
Expression statements
=====================================

a
b + c
1, 2, 3
1, 2, 3,

---

(module
  (expression_statement (identifier))
  (expression_statement (operator (identifier) (op) (identifier)))
  (expression_statement (integer) (integer) (integer))
  (expression_statement (integer) (integer) (integer)))

=====================================
Control-flow statements
=====================================

while true:
  pass
  break
  continue

---

(module
  (generic_statement
    (identifier)
    (true)
    body: (block
      (pass_statement)
      (break_statement)
      (continue_statement))))

=====================================
Return statements
=====================================

return
return a + b, c
return not b

---

(module
  (return_statement)
  (return_statement (expression_list
    (operator (identifier) (op) (identifier))
    (identifier)))
  (return_statement (expression_list (operator (op) (identifier)))))

=====================================
If statements
=====================================

if a:
  b
  c

---

(module
  (generic_statement
    (identifier)
    (identifier)
    body: (block
      (expression_statement (identifier))
      (expression_statement (identifier)))))



====================================================
Raise statements
====================================================

raise
raise RuntimeError('NO')
raise RunTimeError('NO') from e

---

(module
  (raise_statement)
  (raise_statement
    (expression_list (call (identifier) (argument_list (string)))))
  (raise_statement
    (expression_list (call (identifier) (argument_list (string))))
    (identifier)))

====================================================
Comments
====================================================

echo a
# hi
echo b # bye
echo c

---

(module
  (omit_parens_statement (identifier) (identifier))
  (comment)
  (omit_parens_statement (identifier) (identifier))
  (comment)
  (omit_parens_statement (identifier) (identifier)))

====================================================
Comments at different indentation levels
====================================================

if a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (generic_statement (identifier) (identifier)
    (comment)
    (comment)
    (comment)
    (block
      (expression_statement (identifier))
      (comment)
      (expression_statement (identifier)))))

====================================================
Comments after dedents
====================================================

if a:
  b

# one
c

---

(module
  (generic_statement (identifier)
    (identifier)
    (block
      (expression_statement (identifier))))
  (comment)
  (expression_statement (identifier)))

====================================================
Newline tokens followed by comments
====================================================

echo "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module (omit_parens_statement (identifier) (string)) (comment))


