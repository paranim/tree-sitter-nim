=====================================
Import statements
=====================================

import a, b
import b.c as d
import a.b.c

---

(module
  (import_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_statement
    (aliased_import
      (dotted_name (identifier) (identifier))
      (identifier)))
  (import_statement
    (dotted_name (identifier) (identifier) (identifier))))

=====================================
Import-from statements
=====================================

from a import b
from a import *
from a import (b, c)
from a.b import c
from . import b
from .. import b
from .a import b
from ..a import b

---

(module
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (dotted_name (identifier))
    (wildcard_import))
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (dotted_name (identifier) (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import (import_prefix))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import (import_prefix))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name (identifier)))
      (dotted_name (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name (identifier)))
      (dotted_name (identifier))))

=====================================
Echo statements
=====================================

echo a
echo b, c
echo 0 or 1, 1 or 0,
echo 0 or 1

---

(module
  (echo_statement (identifier))
  (echo_statement (identifier) (identifier))
  (echo_statement
    (operator (integer) (integer))
    (operator (integer) (integer)))
  (echo_statement
    (operator (integer) (integer))))

=====================================
Assert statements
=====================================

assert a
assert b, c

---

(module
  (assert_statement (identifier))
  (assert_statement (identifier) (identifier)))

=====================================
Expression statements
=====================================

a
b + c
1, 2, 3
1, 2, 3,

---

(module
  (expression_statement (identifier))
  (expression_statement (operator (identifier) (identifier)))
  (expression_statement (integer) (integer) (integer))
  (expression_statement (integer) (integer) (integer)))

=====================================
Delete statements
=====================================

del a[1], b[2]

---

(module
  (delete_statement (expression_list
    (subscript (identifier) (integer))
    (subscript (identifier) (integer)))))

=====================================
Control-flow statements
=====================================

while true:
  pass
  break
  continue

---

(module
  (while_statement
    condition: (true)
    body: (block
      (pass_statement)
      (break_statement)
      (continue_statement))))

=====================================
Return statements
=====================================

return
return a + b, c
return not b

---

(module
  (return_statement)
  (return_statement (expression_list
    (operator (identifier) (identifier))
    (identifier)))
  (return_statement (expression_list (operator (identifier)))))

=====================================
If statements
=====================================

if a:
  b
  c

---

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement (identifier))
      (expression_statement (identifier)))))

=====================================
If else statements
=====================================

if a:
  b
elif c:
  d
else:
  f

if a:
  b
else:
  f

if a: b

if a: b; c

---

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement (identifier)))
    alternative: (elif_clause
      condition: (identifier)
      consequence: (block
        (expression_statement (identifier))))
    alternative: (else_clause
      body: (block
        (expression_statement (identifier)))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement (identifier)))
    alternative: (else_clause
      body: (block
        (expression_statement (identifier)))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement (identifier))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement (identifier))
      (expression_statement (identifier)))))

=====================================
Nested if statements
=====================================

if a:
  if b:
    c
  else:
    if e:
      f
g

---

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (if_statement
        condition: (identifier)
        consequence: (block
          (expression_statement (identifier)))
        alternative: (else_clause
          body: (block
            (if_statement
              condition: (identifier)
              consequence: (block
                (expression_statement (identifier)))))))))
  (expression_statement (identifier)))

=====================================
While statements
=====================================

while a:
  b

while c:
  d
else:
  e
  f

---

(module
  (while_statement
    condition: (identifier)
    body: (block
      (expression_statement (identifier))))
  (while_statement
    condition: (identifier)
    body: (block
      (expression_statement (identifier)))
    alternative: (else_clause
      body: (block
        (expression_statement (identifier))
        (expression_statement (identifier))))))

=====================================
For statements
=====================================

for line, i in lines:
  echo line
  for character, j in line:
    echo character

---

(module
  (for_statement
    left: (variables (identifier) (identifier))
    right: (expression_list (identifier))
    body: (block
      (echo_statement
        argument: (identifier))
      (for_statement
        left: (variables (identifier) (identifier))
        right: (expression_list (identifier))
        body: (block
          (echo_statement
            argument: (identifier)))))))

=====================================
Try statements
=====================================

try:
  a
except b:
  c
except d as e:
  f
except g, h:
  i
except:
  j

try:
  a
except b:
  c
  d
else:
  e
finally:
  f

---

(module
  (try_statement
    body: (block
      (expression_statement (identifier)))
    (except_clause (identifier)
      (block
        (expression_statement (identifier))))
    (except_clause (identifier) (identifier)
      (block
        (expression_statement (identifier))))
    (except_clause (identifier) (identifier)
      (block
        (expression_statement (identifier))))
    (except_clause
      (block
        (expression_statement (identifier)))))
  (try_statement
    body: (block
      (expression_statement (identifier)))
    (except_clause (identifier)
      (block
        (expression_statement (identifier))
        (expression_statement (identifier))))
    (else_clause body: (block
      (expression_statement (identifier))))
    (finally_clause (block
      (expression_statement (identifier))))))

=====================================
With statements
=====================================

with a as b:
  c

---

(module
  (with_statement
    (with_item (identifier) (identifier))
    (block
      (expression_statement (identifier)))))


=====================================
Function definitions
=====================================

def e((a,b)):
  return (a,b)

def f():
  nonlocal a

---

(module
  (function_definition
    name: (identifier)
    parameters: (parameters (tuple (identifier) (identifier)))
    body: (block
      (return_statement (expression_list (tuple (identifier) (identifier))))))
  (function_definition
    name: (identifier)
    parameters: (parameters)
    body: (block
      (nonlocal_statement (identifier)))))

====================================================
Class definitions
====================================================

class A:
  def b(self):
    return c
class B():
  pass
class B(method1):
  def method1(self):
    return
class C(method1, Sequence[T]):
  pass
class D(Sequence[T, U]):
  pass

---

(module
  (class_definition
    (identifier)
    (block
      (function_definition
        (identifier)
        (parameters (identifier))
        (block
          (return_statement (expression_list (identifier)))))))
 (class_definition
    (identifier)
    (argument_list)
    (block
      (pass_statement)))
 (class_definition
    (identifier)
    (argument_list (identifier))
    (block
      (function_definition
        (identifier)
        (parameters (identifier))
        (block
          (return_statement)))))
 (class_definition
    (identifier)
    (argument_list (identifier) (subscript (identifier) (identifier)))
    (block
      (pass_statement)))
 (class_definition
    (identifier)
    (argument_list (subscript (identifier) (identifier) (identifier)))
    (block
      (pass_statement))))

====================================================
Class definitions with superclasses
====================================================

class A(B, C):
  def d():
    e

---

(module
  (class_definition
    (identifier)
    (argument_list (identifier) (identifier))
    (block
      (function_definition
        (identifier)
        (parameters)
        (block
          (expression_statement (identifier)))))))


====================================================
Raise statements
====================================================

raise
raise RuntimeError('NO')
raise RunTimeError('NO') from e

---

(module
  (raise_statement)
  (raise_statement
    (expression_list (call (identifier) (argument_list (string)))))
  (raise_statement
    (expression_list (call (identifier) (argument_list (string))))
    (identifier)))

====================================================
Comments
====================================================

echo a
# hi
echo b # bye
echo c

---

(module
  (echo_statement (identifier))
  (comment)
  (echo_statement (identifier))
  (comment)
  (echo_statement (identifier)))

====================================================
Comments at different indentation levels
====================================================

if a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (if_statement (identifier)
    (comment)
    (comment)
    (comment)
    (block
      (expression_statement (identifier))
      (comment)
      (expression_statement (identifier)))))

====================================================
Comments after dedents
====================================================

if a:
  b

# one
c

---

(module
  (if_statement
    (identifier)
    (block
      (expression_statement (identifier))))
  (comment)
  (expression_statement (identifier)))

====================================================
Newline tokens followed by comments
====================================================

echo "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module (echo_statement (string)) (comment))

====================================================
Global statements
====================================================

global a
global a, b

---

(module
  (global_statement (identifier))
  (global_statement (identifier) (identifier)))

====================================================
Exec statements
====================================================

exec '1+1'
exec 'x+=1' in nil
exec 'x+=1' in a, b

---

(module
  (exec_statement (string))
  (exec_statement (string) (none))
  (exec_statement (string) (identifier) (identifier)))

==================================================
Extra newlines
==================================================

if a:


    b()


    c()


    def d():


        e()


    f()

---

(module
  (if_statement (identifier) (block
    (expression_statement (call (identifier) (argument_list)))
    (expression_statement (call (identifier) (argument_list)))
    (function_definition (identifier) (parameters) (block
      (expression_statement (call (identifier) (argument_list)))))
    (expression_statement (call (identifier) (argument_list))))))
