=====================================
Import statements
=====================================

import a, b
import b/c as d
import a/b/[c, d]

---

(module
  (block
    (import_statement
      (slashed_name (identifier))
      (slashed_name (identifier))))
  (block
    (import_statement
      (slashed_name (identifier) (identifier))
      (identifier)))
  (block
    (import_statement
      (slashed_name (identifier) (identifier) (identifier_list (identifier) (identifier))))))

=====================================
Import-from statements
=====================================

from a import b
from a import b, c
from a/b import c
from a as b import `c`

---

(module
  (block
    (import_from_statement
      (slashed_name (identifier))
      (identifier)))
  (block
    (import_from_statement
      (slashed_name (identifier))
      (identifier)
      (identifier)))
  (block
    (import_from_statement
      (slashed_name (identifier) (identifier))
      (identifier)))
  (block
    (import_from_statement
      (slashed_name (identifier))
      (identifier)
      (identifier))))

=====================================
Echo statements
=====================================

echo a
echo b, c
echo 0 or 1, 1 or 0,
echo 0 or 1

---

(module
  (block (omit_parens_statement (identifier) (identifier)))
  (block (omit_parens_statement (identifier) (identifier) (identifier)))
  (block
    (omit_parens_statement (identifier)
      (operator (integer) (op) (integer))
      (operator (integer) (op) (integer))))
  (block
    (omit_parens_statement (identifier)
      (operator (integer) (op) (integer)))))


=====================================
Expression statements
=====================================

a
b + c

---

(module
  (block (identifier))
  (block (operator (identifier) (op) (identifier))))


=====================================
If statements
=====================================

if a:
  b
  c
when not defined(release):
  echo "hi"

---

(module
  (block
    (generic_statement
      (identifier)
      (identifier)
      body: (block
        (identifier)
        (identifier))))
  (block
    (generic_statement (identifier)
      (operator (op) right: (call function: (identifier) arguments: (argument_list (identifier))))
      body: (block (omit_parens_statement (identifier) argument: (string))))))


====================================================
Comments
====================================================

echo a
# hi
echo b # bye
echo c

---

(module
  (block (omit_parens_statement (identifier) (identifier)))
  (comment)
  (block (omit_parens_statement (identifier) (identifier))
    (comment))
  (block (omit_parens_statement (identifier) (identifier))))

====================================================
Comments at different indentation levels
====================================================

if a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (block
    (generic_statement (identifier) (identifier)
      (comment)
      (comment)
      (comment)
      (block
        (identifier)
        (comment)
        (identifier)))))

====================================================
Comments after dedents
====================================================

if a:
  b

# one
c

---

(module
  (block
    (generic_statement (identifier)
      (identifier)
      (block
        (identifier))))
  (comment)
  (block (identifier)))

====================================================
Newline tokens followed by comments
====================================================

echo "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module
  (block (omit_parens_statement (identifier) (string)))
  (comment))

=====================================
Declaration statements
=====================================

let a = 1
let a: int = 1
var a: int
var
  a = 1
  b = 2
  c: int = 3
  d: string
  e =
    when defined(release):
      1
    else:
      2
  f = hello()
const a = "hello"

---

(module
  (block (declaration (block (assignment (identifier) (op) (block (integer))))))
  (block (declaration (block (decl (identifier) (type (identifier)) (op) (block (integer))))))
  (block (declaration (block (decl (identifier) (type (identifier))))))
  (block (declaration (block
    (assignment (identifier) (op) (block (integer)))
    (assignment (identifier) (op) (block (integer)))
    (decl (identifier) (type (identifier)) (op) (block (integer)))
    (decl (identifier) (type (identifier)))
    (assignment (identifier) (op) (block
      (generic_statement (identifier) (call (identifier) (argument_list (identifier)))
        (block (integer)))
      (generic_statement (identifier) (block (integer)))))
    (assignment (identifier) (op) (block (call (identifier) (argument_list)))))))
  (block (declaration (block (assignment (identifier) (op) (block (string)))))))


=====================================
Function definitions
=====================================

proc hello()
func goodbye()

proc hello() =
  echo "hello"

proc a(x: int, y: array[2, string])
proc hello() {.cdecl.}

proc `==`*(a, b: NimIdent): bool {.magic: "EqIdent", noSideEffect, deprecated:
  "Deprecated since version 0.18.1; Use '==' on 'NimNode' instead.".}

proc getLib(): string =
  const extension =
    when defined(windows):
      "dll"
    elif defined(macosx):
      "dylib"
    elif defined(linux):
      "so"
  getAppDir().joinPath("libvim." & extension)

---

(module
  (block (function_definition (identifier) (parameters)))
  (block (function_definition (identifier) (parameters)))
  (block (function_definition (identifier) (parameters) (op) (block (omit_parens_statement (identifier) (string)))))
  (block 
    (function_definition (identifier)
      (parameters
        (typed_parameter (identifier) (type (identifier)))
        (typed_parameter (identifier) (type (subscript (identifier) (integer) (identifier)))))))
  (block (function_definition (identifier) (parameters) (pragma (identifier))))
  (block 
    (function_definition (public_id (identifier))
      (parameters (identifier) (typed_parameter (identifier) (type (identifier))))
      (type (identifier))
      (pragma (pair (identifier) (string)) (identifier) (pair (identifier) (string)))))
  (block 
    (function_definition (identifier) (parameters) (type (identifier)) (op)
      (block
        (declaration (block
          (assignment (identifier) (op) (block
            (generic_statement (identifier) (call (identifier) (argument_list (identifier))) (block (string)))
            (generic_statement (identifier) (call (identifier) (argument_list (identifier))) (block (string)))
            (generic_statement (identifier) (call (identifier) (argument_list (identifier))) (block (string)))))))
        (call (attribute (call (identifier) (argument_list)) (identifier)) (argument_list (operator (string) (op) (identifier))))))))

