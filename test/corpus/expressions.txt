=====================================
Identifiers with Greek letters
=====================================

ψ1 = β_γ + Ψ_5

---

(module
  (expression_statement (assignment
    left: (identifier)
    (op)
    right: (block (expression_statement (operator
      left: (identifier)
      (op)
      right: (identifier)))))))

=====================================
Subscript expressions
=====================================

a[1]

---

(module
  (expression_statement (subscript (identifier) (integer))))


=====================================
Subscript slice expressions
=====================================

b[5..6]

---

(module
  (expression_statement (subscript
    (identifier)
    (operator (integer) (op) (integer)))))

=====================================
Attribute references
=====================================

a.b.c

---

(module
  (expression_statement
    (attribute
      (attribute (identifier) (identifier))
      (identifier))))


=====================================
Call expressions
=====================================

__a__()
b(1)
c(e, f=g)
i(j, 5,)

---

(module
  (expression_statement (call
    (identifier)
    (argument_list)))
  (expression_statement (call
    (identifier)
    (argument_list (integer))))
  (expression_statement (call
    (identifier)
    (argument_list
      (identifier)
      (keyword_argument (identifier) (identifier)))))
  (expression_statement (call
    (identifier)
    (argument_list (identifier) (integer)))))

=====================================
Print used as an identifier
=====================================

print()
print(a)
print(a, b=c)
print(d, e)
a(print)

---

(module
  (expression_statement
    (call
      (identifier)
      (argument_list)))
  (expression_statement
    (call
      (identifier)
      (argument_list (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (keyword_argument (identifier) (identifier)))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list (identifier)))))



=====================================
Exec used as an identifier
=====================================

exec("print \"'%s' has %i characters\" % (public_function(), len(public_function()))", {"__builtins__" : nil}, safe_dict)
exec("""exec _code_ in _globs_, _locs_""")

---

(module
  (expression_statement
    (call
      (identifier)
      (argument_list
        (string
           (escape_sequence)
           (escape_sequence))
        (dictionary (pair (string) (none)))
        (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list (string)))))


=====================================
Math operators
=====================================

a + b * c ^ d - e / 5
-5
+x
not x

---

(module
  (expression_statement
    (operator
      (operator
        (identifier)
        (op)
        (operator
          (identifier)
          (op)
          (operator
            (identifier)
            (op)
            (identifier))))
      (op)
      (operator
        (identifier)
        (op)
        (integer))))
  (expression_statement (operator (op) (integer)))
  (expression_statement (operator (op) (identifier)))
  (expression_statement (operator (op) (identifier))))

=====================================
Binary Addition / Subtraction With Floats
=====================================

0.1-0.0
0.1+0.0
0.1-0
0.1+0

1-0.0
1+0.0

---

(module
  (expression_statement
    (operator (float) (op) (float)))
  (expression_statement
    (operator (float) (op) (float)))
  (expression_statement
    (operator (float) (op) (integer)))
  (expression_statement
    (operator (float) (op) (integer)))
  (expression_statement
    (operator (integer) (op) (float)))
  (expression_statement
    (operator (integer) (op) (float))))

=====================================
Power Operator Precedence
=====================================

2^2^3
-2^2

---

(module
  (expression_statement
    (operator
      (integer)
      (op)
      (operator
        (integer)
        (op)
        (integer))))
  (expression_statement
    (operator
      (op)
      (operator
        (integer)
        (op)
        (integer)))))

=====================================
Operator precedence
=====================================

a() + b * c.d.e

---

(module
  (expression_statement
    (operator
      left: (call
        function: (identifier)
        arguments: (argument_list))
      (op)
      right: (operator
        left: (identifier)
        (op)
        right: (attribute
          object: (attribute
            object: (identifier)
            attribute: (identifier))
          attribute: (identifier))))))

=====================================
Bitwise operators
=====================================

a shl b or c shr d and e

---

(module
  (expression_statement
    (operator
      (operator
        (identifier)
        (op)
        (identifier))
      (op)
      (operator
        (operator
          (identifier)
          (op)
          (identifier))
        (op)
        (identifier)))))

=====================================
Boolean operators
=====================================

a or b and c
not d

---

(module
  (expression_statement
    (operator
      (identifier)
      (op)
      (operator
        (identifier)
        (op)
        (identifier))))
  (expression_statement
    (operator (op) (identifier))))

=====================================
Comparison operators
=====================================

a < b <= c == d >= e > f
a == b or c == d

---

(module
  (expression_statement
    (operator
      (operator
        (operator
          (operator
            (operator
              (identifier)
              (op)
              (identifier))
            (op)
            (identifier))
          (op)
          (identifier))
        (op)
        (identifier))
      (op)
      (identifier)))
  (expression_statement
    (operator
      (operator (identifier) (op) (identifier))
      (op)
      (operator (identifier) (op) (identifier)))))


====================================================
Assignments
====================================================

a = 1
a[b] = c

---

(module
  (expression_statement
    (assignment
      (identifier)
      (op)
      (block (expression_statement (integer)))))
  (expression_statement
    (assignment
      (subscript (identifier) (identifier))
      (op)
      (block (expression_statement (identifier))))))


====================================================
Augmented assignments
====================================================

a += 1
c /= 1

---

(module
  (expression_statement
    (operator
      (identifier)
      (op)
      (integer)))
  (expression_statement
    (operator
      (identifier)
      (op)
      (integer))))



