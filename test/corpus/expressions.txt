=====================================
Identifiers with Greek letters
=====================================

ψ1 = β_γ + Ψ_5

---

(module
  (expression_statement (assignment
    left: (expression_list (identifier))
    right: (expression_list (operator
      left: (identifier)
      (op)
      right: (identifier))))))

=====================================
Subscript expressions
=====================================

a[1]

---

(module
  (expression_statement (subscript (identifier) (integer))))


=====================================
Subscript slice expressions
=====================================

b[5..6]

---

(module
  (expression_statement (subscript
    (identifier)
    (operator (integer) (op) (integer)))))

=====================================
Attribute references
=====================================

a.b.c

---

(module
  (expression_statement
    (attribute
      (attribute (identifier) (identifier))
      (identifier))))


=====================================
Call expressions
=====================================

__a__()
b(1)
c(e, f=g)
i(j, 5,)

---

(module
  (expression_statement (call
    (identifier)
    (argument_list)))
  (expression_statement (call
    (identifier)
    (argument_list (integer))))
  (expression_statement (call
    (identifier)
    (argument_list
      (identifier)
      (keyword_argument (identifier) (identifier)))))
  (expression_statement (call
    (identifier)
    (argument_list (identifier) (integer)))))

=====================================
Print used as an identifier
=====================================

print()
print(a)
print(a, b=c)
print(d, e)
a(print)

---

(module
  (expression_statement
    (call
      (identifier)
      (argument_list)))
  (expression_statement
    (call
      (identifier)
      (argument_list (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (keyword_argument (identifier) (identifier)))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list (identifier)))))

=====================================
Print used as a parameter
=====================================

proc a(print) =
  b
proc a(printer=print) =
  c
proc print() =
  a

---

(module
  (function_definition
    (identifier)
    (parameters (identifier))
    (block (expression_statement (identifier))))
  (function_definition
    (identifier)
    (parameters (default_parameter (identifier) (identifier)))
    (block (expression_statement (identifier))))
  (function_definition
    (identifier)
    (parameters)
    (block (expression_statement (identifier)))))


=====================================
Exec used as an identifier
=====================================

exec("print \"'%s' has %i characters\" % (public_function(), len(public_function()))", {"__builtins__" : nil}, safe_dict)
exec("""exec _code_ in _globs_, _locs_""")

---

(module
  (expression_statement
    (call
      (identifier)
      (argument_list
        (string
           (escape_sequence)
           (escape_sequence))
        (dictionary (pair (string) (none)))
        (identifier))))
  (expression_statement
    (call
      (identifier)
      (argument_list (string)))))


=====================================
Math operators
=====================================

a + b * c ^ d - e / 5
-5
+x
not x

---

(module
  (expression_statement
    (operator
      (operator
        (identifier)
        (op)
        (operator
          (identifier)
          (op)
          (operator
            (identifier)
            (op)
            (identifier))))
      (op)
      (operator
        (identifier)
        (op)
        (integer))))
  (expression_statement (operator (op) (integer)))
  (expression_statement (operator (op) (identifier)))
  (expression_statement (operator (op) (identifier))))

=====================================
Binary Addition / Subtraction With Floats
=====================================

0.1-0.0
0.1+0.0
0.1-0
0.1+0

1-0.0
1+0.0

---

(module
  (expression_statement
    (operator (float) (op) (float)))
  (expression_statement
    (operator (float) (op) (float)))
  (expression_statement
    (operator (float) (op) (integer)))
  (expression_statement
    (operator (float) (op) (integer)))
  (expression_statement
    (operator (integer) (op) (float)))
  (expression_statement
    (operator (integer) (op) (float))))

=====================================
Power Operator Precedence
=====================================

2^2^3
-2^2

---

(module
  (expression_statement
    (operator
      (integer)
      (op)
      (operator
        (integer)
        (op)
        (integer))))
  (expression_statement
    (operator
      (op)
      (operator
        (integer)
        (op)
        (integer)))))

=====================================
Operator precedence
=====================================

a() + b * c.d.e

---

(module
  (expression_statement
    (operator
      left: (call
        function: (identifier)
        arguments: (argument_list))
      (op)
      right: (operator
        left: (identifier)
        (op)
        right: (attribute
          object: (attribute
            object: (identifier)
            attribute: (identifier))
          attribute: (identifier))))))

=====================================
Bitwise operators
=====================================

a shl b or c shr d and e

---

(module
  (expression_statement
    (operator
      (operator
        (identifier)
        (op)
        (identifier))
      (op)
      (operator
        (operator
          (identifier)
          (op)
          (identifier))
        (op)
        (identifier)))))

=====================================
Boolean operators
=====================================

a or b and c
not d

---

(module
  (expression_statement
    (operator
      (identifier)
      (op)
      (operator
        (identifier)
        (op)
        (identifier))))
  (expression_statement
    (operator (op) (identifier))))

=====================================
Comparison operators
=====================================

a < b <= c == d >= e > f
a == b or c == d

---

(module
  (expression_statement
    (operator
      (operator
        (operator
          (operator
            (operator
              (identifier)
              (op)
              (identifier))
            (op)
            (identifier))
          (op)
          (identifier))
        (op)
        (identifier))
      (op)
      (identifier)))
  (expression_statement
    (operator
      (operator (identifier) (op) (identifier))
      (op)
      (operator (identifier) (op) (identifier)))))

=====================================
Arrow operators
=====================================

proc passTwoAndTwo(f: (int, int) -> int): int =
  f(2, 2)

passTwoAndTwo((x, y) => x + y)

---

(module
  (function_definition
    (identifier)
    (parameters
      (typed_parameter
        (identifier)
        (type (operator (tuple (identifier) (identifier)) (op) (identifier)))))
    (type (identifier))
    (block
      (expression_statement (call (identifier) (argument_list (integer) (integer))))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (operator (tuple (identifier) (identifier)) (op) (operator (identifier) (op) (identifier)))))))

====================================================
Assignments
====================================================

a = 1
a, b = 1, 2
a, = 1, 2
a[b] = c = d

---

(module
  (expression_statement
    (assignment
      (expression_list
        (identifier))
      (expression_list
        (integer))))
  (expression_statement
    (assignment
      (expression_list
        (identifier)
        (identifier))
      (expression_list
        (integer)
        (integer))))
  (expression_statement
    (assignment
      (expression_list
        (identifier))
      (expression_list
        (integer)
        (integer))))
  (expression_statement
    (assignment
      (expression_list
        (subscript (identifier) (identifier)))
      (assignment
        (expression_list (identifier))
        (expression_list (identifier))))))

====================================================
Declarations with type annotations
====================================================

let tail_leaves: seq[Leaf] = []

---

(module
  (expression_statement (declaration
    (expression_list (identifier))
    (type (subscript (identifier) (identifier)))
    (expression_list (list)))))

====================================================
Augmented assignments
====================================================

a += 1
c /= 1

---

(module
  (expression_statement
    (operator
      (identifier)
      (op)
      (integer)))
  (expression_statement
    (operator
      (identifier)
      (op)
      (integer))))

====================================================
Named expressions
====================================================

a := x
(y := f(x))
foo(x=(y := f(x)))
y0 = (y1 := f(x))
proc foo(answer=(p := 42)) =
  return answer
proc foo(answer: (p := 42) = 5) =
  return answer
foo(x := 3, cat='vector')
(z := (y := (x := 0)))

---

(module
  (expression_statement
    (named_expression
      (identifier)
      (identifier)))
  (expression_statement
    (parenthesized_expression
      (named_expression
        (identifier)
        (call (identifier) (argument_list (identifier))))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (keyword_argument
          (identifier)
          (parenthesized_expression
            (named_expression
              (identifier)
              (call (identifier) (argument_list (identifier)))))))))
  (expression_statement
    (assignment
      (expression_list (identifier))
      (expression_list
        (parenthesized_expression
          (named_expression
            (identifier)
            (call (identifier) (argument_list (identifier))))))))
  (function_definition
    (identifier)
    (parameters
      (default_parameter
        (identifier)
        (parenthesized_expression (named_expression (identifier) (integer)))))
    (block (return_statement (expression_list (identifier)))))
  (function_definition
    (identifier)
    (parameters
      (typed_default_parameter
        (identifier)
        (type (parenthesized_expression (named_expression (identifier) (integer))))
        (integer)))
    (block (return_statement (expression_list (identifier)))))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (named_expression (identifier) (integer))
        (keyword_argument (identifier) (string)))))
  (expression_statement
    (parenthesized_expression
      (named_expression
        (identifier)
        (parenthesized_expression
          (named_expression
            (identifier)
            (parenthesized_expression
              (named_expression
                (identifier)
                (integer)))))))))

====================================================
lambdas
====================================================

proc (a: int, b: int): int = a + b

---

(module
  (expression_statement
    (lambda
      (parameters
        (typed_parameter (identifier) (type (identifier)))
        (typed_parameter (identifier) (type (identifier))))
      (type (identifier))
      (operator (identifier) (op) (identifier)))))

=====================================
Conditional if expressions
=====================================

a = if c: b else: d
if a: something() else: d
if a: slice(1,1,1) else: d
echo if a: "hi" else: "bye"

---

(module
  (expression_statement
    (assignment
      (expression_list (identifier))
      (expression_list
        (if_expression (identifier) (identifier) (else_expression (identifier))))))
  (expression_statement
    (if_expression (identifier) (call (identifier) (argument_list)) (else_expression (identifier))))
  (expression_statement
    (if_expression (identifier)
      (call (identifier) (argument_list (integer) (integer) (integer)))
      (else_expression (identifier))))
  (omit_parens_statement (identifier) (if_expression (identifier) (string) (else_expression (string)))))

